 STL is an acronym for standard template library. It is a set of C++ template classes that provide
 generic classes and function that can be used to implement data structures and algorithms .
 STL is mainly composed of :
 1.Containers
 2.Algorithms
 3.Iterators

 STL provides numerous containers and algorithms which are very useful in competitive programming.for example you can very easily define a linked list in a single statement by using list container of container library in STL , saving your time and effort.

 STL is a generic library , i.e a same container or algorithm can be operated on different data types , you don’t have to define the same algorithm for different type of elements.For example , sort algorithm will sort the elements in the given range irrespective of their data type , we don’t have to implement different sort algorithm for different datatypes.

 1.Containers: 
   Container library in STL provide containers that are used to create data structures like arrays, linked list, trees etc. and it is used to store data value. These container are generic, they can hold elements of any data types, for example: vector can be used for creating dynamic arrays of char, integer, float and other types.

 2.Algorithm:
   STL provide number of algorithms that can be used of any container, irrespective of their type. Algorithms library contains built in functions that performs complex algorithms on the data structures.For example: one can reverse a range with reverse() function, sort a range with sort() function, search in a range with binary_search() and so on.Algorithm library provides abstraction, i.e you don't necessarily need to know how the the algorithm works.

 3.Iterators:
   Iterators in STL are used to point to the containers. Iterators actually acts as a bridge between containers and algorithms.For example: sort() algorithm have two parameters, starting iterator and ending iterator, now sort() compare the elements pointed by each of these iterators and arrange them in sorted order, thus it does not matter what is the type of the container and same sort() can be used on different types of containers.

 Use & Application Of STL:
 STL being generic library provide containers and algorithms which can be used to store and manipulate different types of data thus it saves us from defining these data structures and algorithms from the scratch. Because of STL, now we do not have to define our sort function every time we make a new program or define same function twice for the different data types, instead we can just use the generic container and algorithms in STL. This saves a lot of time, code and effort during programming, thus STL is heavily used in the competitive programming, plus it is reliable and fast.

 What are Containers in STL?
 Containers Library in STL gives us the Containers, which in simplest words, can be described as the objects used to contain data or rather collection of object. Containers help us to implement and replicate simple and complex data structures very easily like arrays, list, trees, associative arrays and many more. The containers are implemented as generic class templates, means that a container can be used to hold different kind of objects and they are dynamic in nature!
 Following are some common containers :
 vector : replicates arrays
 queue : replicates queues
 stack : replicates stack
 priority_queue : replicates heaps
 list : replicates linked list
 set : replicates trees
 map : associative arrays

 Classification of Containers in STL
 Containers are classified into four categories :

 1.Sequence containers : Used to implement data structures that are sequential in nature like arrays(array) and linked list(list).
 2.Associative containers : Used to implement sorted data structures such as map, set etc.
 3.Unordered associative containers : Used to implement unsorted data structures.
 4.Containers adaptors : Used to provide different interface to the sequence containers.

 Using Container Library in STL
 Below is an example of implementing linked list, first by using structures and then by list containers.

 #include <iostream>

struct node
{
    int data;
    struct node * next;
}

int main ()
{
    struct node *list1 = NULL;
}

 The above program is only creating a list node, no insertion and deletion functions are defined, to do that, you will have to write more line of code.
 Now lets see how using Container Library simplifies it. When we use list containers to implement linked list we just have to include the list header file and use list constructor to initialize the list.
 
 #include <iostream>
 #include <list>

int main ()
{
    list<int> list1; 
}

 And that's it! we have a list, and not just that, the containers library also give all the different methods which can be used to perform different operations on list such as insertion, deletion, traversal etc.
 Thus you can see that it is incredibly easy to implement data structures by using Container library.


